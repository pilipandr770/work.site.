#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω Polygon.
–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã ERC20 —Ç–æ–∫–µ–Ω–∞, —Ç–æ–∫–µ–Ω—Å–µ–π–ª–∞ –∏ DAO.
"""

import json
import os
import sys
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from web3 import Web3
from solcx import compile_standard, install_solc

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é solc
def install_solc_if_needed():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä Solidity –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ Solidity...")
    try:
        install_solc("0.8.19")
        print("–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä Solidity —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞: {e}")
        exit(1)

def compile_contract(contract_path, contract_name):
    """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
    print(f"–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract_name}...")
    
    with open(contract_path, "r", encoding="utf-8") as file:
        contract_source = file.read()
    
    compiled_sol = compile_standard(
        {
            "language": "Solidity",
            "sources": {contract_name: {"content": contract_source}},
            "settings": {
                "outputSelection": {
                    "*": {"*": ["abi", "metadata", "evm.bytecode", "evm.sourceMap"]}
                }
            },
        },
        solc_version="0.8.19",
    )
    
    # –ü–æ–ª—É—á–∞–µ–º ABI –∏ –±–∞–π—Ç–∫–æ–¥
    contract_data = compiled_sol["contracts"][contract_name][contract_name.split(".")[0]]
    abi = contract_data["abi"]
    bytecode = contract_data["evm"]["bytecode"]["object"]
    
    return abi, bytecode

def deploy_contract(w3, abi, bytecode, private_key, constructor_args=None):
    """–î–µ–ø–ª–æ–∏—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω"""
    account = w3.eth.account.from_key(private_key)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    Contract = w3.eth.contract(abi=abi, bytecode=bytecode)
    
    # –ü–æ–ª—É—á–∞–µ–º nonce –¥–ª—è –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    nonce = w3.eth.get_transaction_count(account.address)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–ª–æ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if constructor_args:
        transaction = Contract.constructor(*constructor_args).build_transaction(
            {
                "chainId": w3.eth.chain_id,
                "gasPrice": w3.eth.gas_price,
                "from": account.address,
                "nonce": nonce,
            }
        )
    else:
        transaction = Contract.constructor().build_transaction(
            {
                "chainId": w3.eth.chain_id,
                "gasPrice": w3.eth.gas_price,
                "from": account.address,
                "nonce": nonce,
            }
        )
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    signed_transaction = w3.eth.account.sign_transaction(transaction, private_key=private_key)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    tx_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)
    
    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")
    
    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    
    return tx_receipt.contractAddress

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
    print("üöÄ –î–µ–ø–ª–æ–π —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ IT Shop")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    existing_address = os.getenv("EXISTING_TOKEN_ADDRESS") or os.getenv("CONTRACT_ADDRESS")
    if existing_address and existing_address != "0x1234567890123456789012345678901234567890":
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {existing_address}")
        choice = input("–í—Å–µ —Ä–∞–≤–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç? (y/N): ").strip().lower()
        if choice != 'y':
            print("–î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç.")
            print("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –≤ –ë–î –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python update_token_address.py")
            return
    
    install_solc_if_needed()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
    PRIVATE_KEY = os.getenv("POLYGON_PRIVATE_KEY")
    INFURA_API_KEY = os.getenv("INFURA_API_KEY")
    
    if not PRIVATE_KEY or not INFURA_API_KEY:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å POLYGON_PRIVATE_KEY –∏ INFURA_API_KEY –≤ —Ñ–∞–π–ª–µ .env")
        print("\n–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ .env:")
        print("POLYGON_PRIVATE_KEY=–≤–∞—à_–ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á")
        print("INFURA_API_KEY=–≤–∞—à_–∫–ª—é—á_infura")
        print("\nüí° –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –º–æ–∂–Ω–æ:")
        print("- INFURA_API_KEY: https://infura.io/")
        print("- POLYGON_PRIVATE_KEY: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑ MetaMask")
        exit(1)
      # –í—ã–±–æ—Ä —Å–µ—Ç–∏
    network = os.getenv("POLYGON_NETWORK", "mumbai").lower()
    if network == "mainnet":
        rpc_url = f"https://polygon-mainnet.infura.io/v3/{INFURA_API_KEY}"
        chain_name = "Polygon Mainnet"
        explorer_url = "https://polygonscan.com"
    else:
        rpc_url = f"https://polygon-mumbai.infura.io/v3/{INFURA_API_KEY}"
        chain_name = "Polygon Mumbai Testnet"
        explorer_url = "https://mumbai.polygonscan.com"
    
    print(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {chain_name}...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É
    w3 = Web3(Web3.HTTPProvider(rpc_url))
    
    if not w3.is_connected():
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {chain_name}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å INFURA_API_KEY")
        print("- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        exit(1)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {chain_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    account = w3.eth.account.from_key(PRIVATE_KEY)
    balance = w3.eth.get_balance(account.address)
    balance_matic = w3.from_wei(balance, 'ether')
    
    print(f"üëõ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {account.address}")
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_matic:.4f} MATIC")
    
    if balance_matic < 0.01:
        print("‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å MATIC –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞!")
        if network == "mumbai":
            print("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ MATIC: https://faucet.polygon.technology/")
        else:
            print("üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å MATIC –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ")
        
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/N): ").strip().lower()
        if choice != 'y':
            exit(1)
    
    # –ü—É—Ç–∏ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
    contracts_dir = Path("contracts")
    token_contract_path = contracts_dir / "ITShopToken.sol"
    
    if not token_contract_path.exists():
        print(f"–§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {token_contract_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –¥–µ–ø–ª–æ–∏–º —Ç–æ–∫–µ–Ω
    token_abi, token_bytecode = compile_contract(token_contract_path, "ITShopToken.sol")
    
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∏–º–≤–æ–ª, –æ–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    token_args = ["IT Shop Token", "ITST", 1000000 * 10**18]  # 1,000,000 —Ç–æ–∫–µ–Ω–æ–≤ —Å 18 –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
      # –î–µ–ø–ª–æ–∏–º —Ç–æ–∫–µ–Ω
    print("\nüî® –î–µ–ø–ª–æ–π —Ç–æ–∫–µ–Ω–∞...")
    token_address = deploy_contract(w3, token_abi, token_bytecode, PRIVATE_KEY, token_args)
    print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {token_address}")
    print(f"üîó –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Explorer: {explorer_url}/token/{token_address}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    contract_data = {
        "token_address": token_address,
        "token_abi": token_abi,
        "network": network,
        "chain_name": chain_name,
        "deploy_date": str(datetime.now()),
        "deployer_address": account.address
    }
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    deploy_dir = Path("deployments")
    deploy_dir.mkdir(exist_ok=True)
      with open(deploy_dir / "contract_data.json", "w") as file:
        json.dump(contract_data, file, indent=4)
    
    print(f"üíæ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ deployments/contract_data.json")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    env_path = Path(".env")
    if env_path.exists():
        with open(env_path, "r", encoding='utf-8') as file:
            env_content = file.read()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º CONTRACT_ADDRESS
        if "CONTRACT_ADDRESS=" in env_content:
            lines = env_content.split('\n')
            for i, line in enumerate(lines):
                if line.startswith('CONTRACT_ADDRESS='):
                    lines[i] = f'CONTRACT_ADDRESS={token_address}'
                    break
            env_content = '\n'.join(lines)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            env_content += f"\nCONTRACT_ADDRESS={token_address}\n"
            
        with open(env_path, "w", encoding='utf-8') as file:
            file.write(env_content)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª
        with open(env_path, "w", encoding='utf-8') as file:
            file.write(f"CONTRACT_ADDRESS={token_address}\n")
    
    print("‚úÖ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
    print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        import subprocess
        result = subprocess.run([
            sys.executable, "update_token_address.py"
        ], capture_output=True, text=True, cwd=Path(__file__).parent)
        
        if result.returncode == 0:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {result.stderr}")
            print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: python update_token_address.py")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ë–î: {e}")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: python update_token_address.py")
    
    print("\n" + "="*50)
    print("üéâ –î–ï–ü–õ–û–ô –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    print("="*50)
    print(f"üìã –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {token_address}")
    print(f"üåê –°–µ—Ç—å: {chain_name}")
    print(f"üîó Explorer: {explorer_url}/token/{token_address}")
    print(f"üëõ –í–ª–∞–¥–µ–ª–µ—Ü: {account.address}")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
    print("2. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ MetaMask –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ")
    print("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

if __name__ == "__main__":
    main()
