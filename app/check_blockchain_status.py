#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ IT Shop.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
"""

import os
import sys
import json
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("-" * 40)
    
    required_vars = {
        'CONTRACT_ADDRESS': '–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
        'POLYGON_NETWORK': '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å (mainnet/mumbai)',
    }
    
    optional_vars = {
        'POLYGON_PRIVATE_KEY': '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–ø–ª–æ—è',
        'INFURA_API_KEY': 'API –∫–ª—é—á Infura',
        'EXISTING_TOKEN_ADDRESS': '–ê–¥—Ä–µ—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞',
    }
    
    status = True
    
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value and value != "0x1234567890123456789012345678901234567890":
            print(f"‚úÖ {var}: {description}")
        else:
            print(f"‚ùå {var}: –ù–ï –ù–ê–°–¢–†–û–ï–ù - {description}")
            status = False
    
    print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {description}")
        else:
            print(f"‚ö™ {var}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - {description}")
    
    return status

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 40)
    
    try:
        from app import create_app, db
        from app.models import Token, Airdrop, TokenSale, DaoProposal
        
        app = create_app()
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            token = Token.query.first()
            if token:
                print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token.name} ({token.symbol})")
                print(f"   –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {token.contract_address}")
                print(f"   –û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {token.total_supply}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ .env –∏ –ë–î
                env_address = os.getenv('CONTRACT_ADDRESS')
                if token.contract_address == env_address:
                    print("‚úÖ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –ë–î —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç .env")
                else:
                    print("‚ö†Ô∏è  –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –ë–î –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç .env")
                    print(f"   –ë–î: {token.contract_address}")
                    print(f"   .env: {env_address}")
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
            airdrop_count = Airdrop.query.count()
            tokensale_count = TokenSale.query.count()
            dao_count = DaoProposal.query.count()
            
            print(f"üìä –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ:")
            print(f"   –ê–∏—Ä–¥—Ä–æ–ø—ã: {airdrop_count}")
            print(f"   –¢–æ–∫–µ–Ω—Å–µ–π–ª—ã: {tokensale_count}")
            print(f"   DAO –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {dao_count}")
            
            if airdrop_count == 0 and tokensale_count == 0 and dao_count == 0:
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∑–∞–ø—É—Å—Ç–∏—Ç–µ python utils/demo_data.py")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def check_contract_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    print("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
    print("-" * 40)
    
    contract_file = Path("contracts/ITShopToken.sol")
    deploy_script = Path("deploy_contracts.py")
    deployments_dir = Path("deployments")
    
    status = True
    
    if contract_file.exists():
        print("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ITShopToken.sol –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ITShopToken.sol –Ω–µ –Ω–∞–π–¥–µ–Ω")
        status = False
    
    if deploy_script.exists():
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è deploy_contracts.py –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è deploy_contracts.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        status = False
    
    if deployments_dir.exists():
        contract_data_file = deployments_dir / "contract_data.json"
        if contract_data_file.exists():
            try:
                with open(contract_data_file, 'r') as f:
                    data = json.load(f)
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–∞–π–¥–µ–Ω—ã")
                print(f"   –ê–¥—Ä–µ—Å: {data.get('token_address', 'N/A')}")
                print(f"   –°–µ—Ç—å: {data.get('network', 'N/A')}")
                print(f"   –î–∞—Ç–∞ –¥–µ–ø–ª–æ—è: {data.get('deploy_date', 'N/A')}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–µ–ø–ª–æ—è: {e}")
        else:
            print("‚ö™ –î–∞–Ω–Ω—ã–µ –¥–µ–ø–ª–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (contract_data.json)")
    else:
        print("‚ö™ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è deployments –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return status

def check_web3_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("-" * 40)
    
    js_files = {
        'static/js/web3_utils.js': '–£—Ç–∏–ª–∏—Ç—ã Web3',
        'static/js/blockchain.js': '–ë–ª–æ–∫—á–µ–π–Ω —Ñ—É–Ω–∫—Ü–∏–∏',
    }
    
    css_files = {
        'static/css/blockchain.css': '–°—Ç–∏–ª–∏ –±–ª–æ–∫—á–µ–π–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
    }
    
    template_dirs = {
        'templates/blockchain/': '–®–∞–±–ª–æ–Ω—ã –±–ª–æ–∫—á–µ–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü',
    }
    
    status = True
    
    print("JavaScript —Ñ–∞–π–ª—ã:")
    for file_path, description in js_files.items():
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}: {description}")
        else:
            print(f"‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù - {description}")
            status = False
    
    print("\nCSS —Ñ–∞–π–ª—ã:")
    for file_path, description in css_files.items():
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}: {description}")
        else:
            print(f"‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù - {description}")
            status = False
    
    print("\n–®–∞–±–ª–æ–Ω—ã:")
    for dir_path, description in template_dirs.items():
        if Path(dir_path).exists():
            template_count = len(list(Path(dir_path).glob('*.html')))
            print(f"‚úÖ {dir_path}: {description} ({template_count} —Ñ–∞–π–ª–æ–≤)")
        else:
            print(f"‚ùå {dir_path}: –ù–ï –ù–ê–ô–î–ï–ù - {description}")
            status = False
    
    return status

def check_routes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("\nüõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    print("-" * 40)
    
    try:
        from app import create_app
        app = create_app()
        
        blockchain_routes = []
        for rule in app.url_map.iter_rules():
            if 'blockchain' in rule.rule:
                blockchain_routes.append(rule.rule)
        
        if blockchain_routes:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(blockchain_routes)} –±–ª–æ–∫—á–µ–π–Ω –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
            for route in sorted(blockchain_routes):
                print(f"   {route}")
        else:
            print("‚ùå –ë–ª–æ–∫—á–µ–π–Ω –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        return False

def provide_recommendations(env_ok, db_ok, files_ok, web3_ok, routes_ok):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("=" * 50)
    
    if not env_ok:
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   python setup_blockchain.py")
    
    if not db_ok:
        print("üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print("   python update_token_address.py")
        print("   python utils/demo_data.py")
    
    if not files_ok:
        print("üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    
    if not web3_ok:
        print("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JS/CSS —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    if not routes_ok:
        print("üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–ª–æ–∫—á–µ–π–Ω –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    if all([env_ok, db_ok, files_ok, web3_ok, routes_ok]):
        print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: /token")
        print("   ‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –∞–∏—Ä–¥—Ä–æ–ø–∞—Ö: /airdrop")
        print("   ‚Ä¢ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: /token-sale")
        print("   ‚Ä¢ DAO –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: /dao")
        print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
        
        network = os.getenv('POLYGON_NETWORK', 'mumbai')
        contract_address = os.getenv('CONTRACT_ADDRESS')
        
        if contract_address and contract_address != "0x1234567890123456789012345678901234567890":
            if network == 'mainnet':
                print(f"   ‚Ä¢ Polygonscan: https://polygonscan.com/token/{contract_address}")
            else:
                print(f"   ‚Ä¢ Mumbai Polygonscan: https://mumbai.polygonscan.com/token/{contract_address}")
        
        print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ MetaMask")
        print("   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ MATIC: https://faucet.polygon.technology/")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–õ–û–ö–ß–ï–ô–ù-–ò–ù–¢–ï–ì–†–ê–¶–ò–ò IT SHOP")
    print("=" * 60)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    env_ok = check_environment()
    db_ok = check_database()
    files_ok = check_contract_files()
    web3_ok = check_web3_integration()
    routes_ok = check_routes()
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    provide_recommendations(env_ok, db_ok, files_ok, web3_ok, routes_ok)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    total_checks = 5
    passed_checks = sum([env_ok, db_ok, files_ok, web3_ok, routes_ok])
    
    print(f"\nüìä –ò–¢–û–ì–û: {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_checks == total_checks:
        print("‚úÖ –ë–ª–æ–∫—á–µ–π–Ω-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
        return 0
    elif passed_checks >= 3:
        print("‚ö†Ô∏è  –ë–ª–æ–∫—á–µ–π–Ω-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞")
        return 1
    else:
        print("‚ùå –ë–ª–æ–∫—á–µ–π–Ω-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return 2

if __name__ == "__main__":
    sys.exit(main())
