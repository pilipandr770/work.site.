#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫—á–µ–π–Ω-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ IT Shop.
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º.
"""

import os
import sys
from pathlib import Path

def setup_blockchain_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫—á–µ–π–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫—á–µ–π–Ω-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ IT Shop")
    print("=" * 50)
    
    env_path = Path('.env')
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as file:
            content = file.read()
    else:
        content = ""
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º:")
    print("1. üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–∞ Polygon")
    print("2. üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç")
    print("3. üß™ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Mumbai Testnet)")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2/3): ").strip()
    
    if choice == "1":
        setup_existing_token(content, env_path)
    elif choice == "2":
        setup_new_contract(content, env_path)
    elif choice == "3":
        setup_testnet(content, env_path)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python update_token_address.py")
    print("- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ —Å–∞–π—Ç–µ")

def setup_existing_token(content, env_path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞")
    print("-" * 30)
    
    token_address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: ").strip()
    if not validate_address(token_address):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞")
        return
    
    network = input("–°–µ—Ç—å (mainnet/mumbai) [mainnet]: ").strip().lower() or "mainnet"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_updates = {
        'CONTRACT_ADDRESS': token_address,
        'EXISTING_TOKEN_ADDRESS': token_address,
        'POLYGON_NETWORK': network,
    }
    
    updated_content = update_env_content(content, config_updates)
    
    with open(env_path, 'w', encoding='utf-8') as file:
        file.write(updated_content)
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {token_address}")
    print(f"üåê –°–µ—Ç—å: {network}")

def setup_new_contract(content, env_path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    print("\nüöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
    print("-" * 30)
    
    print("–î–ª—è –¥–µ–ø–ª–æ—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
    print("1. INFURA_API_KEY - –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://infura.io/")
    print("2. POLYGON_PRIVATE_KEY - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑ MetaMask")
    print("3. MATIC –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞")
    
    infura_key = input("\n–í–≤–µ–¥–∏—Ç–µ INFURA_API_KEY: ").strip()
    if not infura_key:
        print("‚ùå INFURA_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        return
    
    private_key = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x): ").strip()
    if not private_key or len(private_key) != 66:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")
        return
    
    network = input("–°–µ—Ç—å –¥–ª—è –¥–µ–ø–ª–æ—è (mainnet/mumbai) [mumbai]: ").strip().lower() or "mumbai"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_updates = {
        'INFURA_API_KEY': infura_key,
        'POLYGON_PRIVATE_KEY': private_key,
        'POLYGON_NETWORK': network,
        'DEPLOY_NEW_CONTRACT': 'true',
    }
    
    updated_content = update_env_content(content, config_updates)
    
    with open(env_path, 'w', encoding='utf-8') as file:
        file.write(updated_content)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print(f"üåê –°–µ—Ç—å: {network}")
    print("\nüöÄ –î–ª—è –¥–µ–ø–ª–æ—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python deploy_contracts.py")

def setup_testnet(content, env_path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏"""
    print("\nüß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mumbai Testnet")
    print("-" * 30)
    
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print("- –°–µ—Ç—å: Polygon Mumbai Testnet")
    print("- –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω placeholder")
    print("- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ demo-—Ä–µ–∂–∏–º–µ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_updates = {
        'POLYGON_NETWORK': 'mumbai',
        'CONTRACT_ADDRESS': '0x1234567890123456789012345678901234567890',
        'TESTNET_MODE': 'true',
    }
    
    updated_content = update_env_content(content, config_updates)
    
    with open(env_path, 'w', encoding='utf-8') as file:
        file.write(updated_content)
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö MATIC: https://faucet.polygon.technology/")

def update_env_content(content, updates):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞"""
    lines = content.split('\n') if content else []
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    existing_vars = {}
    for i, line in enumerate(lines):
        if '=' in line and not line.strip().startswith('#'):
            key = line.split('=')[0].strip()
            existing_vars[key] = i
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for key, value in updates.items():
        if key in existing_vars:
            lines[existing_vars[key]] = f"{key}={value}"
        else:
            lines.append(f"{key}={value}")
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    while lines and not lines[-1].strip():
        lines.pop()
    
    return '\n'.join(lines)

def validate_address(address):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Ethereum –∞–¥—Ä–µ—Å–∞"""
    return (
        address and 
        len(address) == 42 and 
        address.startswith('0x') and 
        all(c in '0123456789abcdefABCDEF' for c in address[2:])
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup_blockchain_config()
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
