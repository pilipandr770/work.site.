#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app import create_app, db
from app.models import Token

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def update_token_address(contract_address, token_name=None, token_symbol=None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        contract_address (str): –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        token_name (str, optional): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token_symbol (str, optional): –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞
    """
    app = create_app()
    
    with app.app_context():
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        token = Token.query.first()
        
        if not token:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            token = Token(
                name=token_name or "IT Shop Token",
                symbol=token_symbol or "ITST",
                contract_address=contract_address,
                decimals=18,
                total_supply=1000000,  # 1M —Ç–æ–∫–µ–Ω–æ–≤
                circulating_supply=700000,  # 70% –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
                token_price_usd=0.1,  # $0.1 –∑–∞ —Ç–æ–∫–µ–Ω
                description="–¢–æ–∫–µ–Ω —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã IT Shop –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤, —É—á–∞—Å—Ç–∏—è –≤ DAO –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.",
                description_ua="–¢–æ–∫–µ–Ω –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏ IT Shop –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–æ–≤–∞—Ä—ñ–≤, —É—á–∞—Å—Ç—ñ –≤ DAO —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–Ω–∞–≥–æ—Ä–æ–¥.",
                description_en="IT Shop ecosystem token for paying goods, participating in DAO and earning rewards.",
                description_de="IT Shop √ñkosystem-Token f√ºr die Bezahlung von Waren, die Teilnahme an DAO und das Verdienen von Belohnungen.",
                description_ru="–¢–æ–∫–µ–Ω —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã IT Shop –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤, —É—á–∞—Å—Ç–∏—è –≤ DAO –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π."
            )
            db.session.add(token)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {token.name} ({token.symbol})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
            token.contract_address = contract_address
            if token_name:
                token.name = token_name
            if token_symbol:
                token.symbol = token_symbol
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω: {token.name} ({token.symbol})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        print(f"üìù –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {contract_address}")
        print(f"üåê –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Polygonscan: https://polygonscan.com/token/{contract_address}")
        print(f"üß™ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Mumbai Testnet: https://mumbai.polygonscan.com/token/{contract_address}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    contract_address = os.getenv('EXISTING_TOKEN_ADDRESS') or os.getenv('CONTRACT_ADDRESS')
    
    if not contract_address or contract_address == "0x1234567890123456789012345678901234567890":
        print("‚ö†Ô∏è  –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        print("\n–í–∞—Ä–∏–∞–Ω—Ç—ã:")
        print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–∞ Polygon")
        print("2. –ó–∞–¥–µ–ø–ª–æ–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
        print("3. –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2/3): ").strip()
        
        if choice == "1":
            contract_address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: ").strip()
            token_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∏–ª–∏ Enter –¥–ª—è 'IT Shop Token'): ").strip() or None
            token_symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–∏–ª–∏ Enter –¥–ª—è 'ITST'): ").strip() or None
            
        elif choice == "2":
            print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
            print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: python deploy_contracts.py")
            print("–ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
            return
            
        elif choice == "3":
            contract_address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ").strip()
            token_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip() or None
            token_symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip() or None
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
    else:
        token_name = None
        token_symbol = None
        print(f"üìã –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ .env: {contract_address}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if not contract_address or len(contract_address) != 42 or not contract_address.startswith('0x'):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 42 —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å '0x'")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    try:
        update_token_address(contract_address, token_name, token_symbol)
        print("\n‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        print("üåü –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –±–ª–æ–∫—á–µ–π–Ω —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–π—Ç–∞.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        env_path = Path('.env')
        if env_path.exists():
            with open(env_path, 'r', encoding='utf-8') as file:
                content = file.read()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º CONTRACT_ADDRESS
            if 'CONTRACT_ADDRESS=' in content:
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.startswith('CONTRACT_ADDRESS='):
                        lines[i] = f'CONTRACT_ADDRESS={contract_address}'
                        break
                
                with open(env_path, 'w', encoding='utf-8') as file:
                    file.write('\n'.join(lines))
                
                print(f"üìù –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

if __name__ == "__main__":
    main()
